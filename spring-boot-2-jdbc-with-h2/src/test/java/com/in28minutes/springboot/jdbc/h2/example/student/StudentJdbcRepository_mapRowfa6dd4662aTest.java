// Test generated by RoostGPT for test dummy-test using AI Model gpt

package com.in28minutes.springboot.jdbc.h2.example.student;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class StudentJdbcRepository_mapRowfa6dd4662aTest {

    private StudentJdbcRepository studentJdbcRepository;

    @Mock
    private ResultSet resultSet;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        studentJdbcRepository = new StudentJdbcRepository();
    }

    @Test
    public void testMapRow_ValidResultSet() throws SQLException {
        when(resultSet.getLong("id")).thenReturn(1L);
        when(resultSet.getString("name")).thenReturn("John Doe");
        when(resultSet.getString("passport_number")).thenReturn("A123456");

        Student student = studentJdbcRepository.mapRow(resultSet, 1);

        assertNotNull(student);
        assertEquals(1L, student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("A123456", student.getPassportNumber());
    }

    @Test
    public void testMapRow_EmptyResultSet() throws SQLException {
        when(resultSet.getLong("id")).thenReturn(0L);
        when(resultSet.getString("name")).thenReturn("");
        when(resultSet.getString("passport_number")).thenReturn("");

        Student student = studentJdbcRepository.mapRow(resultSet, 1);

        assertNotNull(student);
        assertEquals(0L, student.getId());
        assertEquals("", student.getName());
        assertEquals("", student.getPassportNumber());
    }

    @Test
    public void testMapRow_ResultSetThrowsException() throws SQLException {
        when(resultSet.getLong("id")).thenThrow(SQLException.class);
        when(resultSet.getString("name")).thenThrow(SQLException.class);
        when(resultSet.getString("passport_number")).thenThrow(SQLException.class);

        assertThrows(SQLException.class, () -> studentJdbcRepository.mapRow(resultSet, 1));
    }
}