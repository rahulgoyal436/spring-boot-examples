// Test generated by RoostGPT for test dummy-test using AI Model gpt

package com.in28minutes.springboot.jdbc.h2.example.student;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;

@Repository
public class StudentJdbcRepository_insert34d1e8fce4Test {

    @InjectMocks
    private StudentJdbcRepository studentJdbcRepository;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInsert_Success() {
        Student student = new Student(1, "John Doe", "A1234567");
        when(jdbcTemplate.update("insert into student (id, name, passport_number) values(?,  ?, ?)",
                student.getId(), student.getName(), student.getPassportNumber())).thenReturn(1);

        int result = studentJdbcRepository.insert(student);
        assertEquals(1, result);
    }

    @Test
    public void testInsert_Failure() {
        Student student = new Student(1, "John Doe", "A1234567");
        when(jdbcTemplate.update("insert into student (id, name, passport_number) values(?,  ?, ?)",
                student.getId(), student.getName(), student.getPassportNumber())).thenReturn(0);

        int result = studentJdbcRepository.insert(student);
        assertEquals(0, result);
    }
}