// Test generated by RoostGPT for test dummy-test using AI Model gpt

package com.in28minutes.springboot.jdbc.h2.example.student;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class StudentJdbcRepository_findAll2896be8631Test {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private StudentJdbcRepository studentJdbcRepository;

    private RowMapper<Student> rowMapper;
    private List<Student> expectedStudents;

    @BeforeEach
    public void setUp() {
        rowMapper = new StudentRowMapper();
        expectedStudents = Arrays.asList(
            new Student(1, "John", "Doe", 25),
            new Student(2, "Jane", "Doe", 23)
        );
    }

    @Test
    public void testFindAll_Success() {
        when(jdbcTemplate.query("select * from student", rowMapper)).thenReturn(expectedStudents);

        List<Student> actualStudents = studentJdbcRepository.findAll();

        assertEquals(expectedStudents, actualStudents);
    }

    @Test
    public void testFindAll_EmptyList() {
        when(jdbcTemplate.query("select * from student", rowMapper)).thenReturn(Arrays.asList());

        List<Student> actualStudents = studentJdbcRepository.findAll();

        assertEquals(0, actualStudents.size());
    }

    private static class StudentRowMapper implements RowMapper<Student> {
        @Override
        public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
            Student student = new Student();
            student.setId(rs.getLong("id"));
            student.setName(rs.getString("name"));
            student.setCourse(rs.getString("course"));
            student.setAge(rs.getInt("age"));
            return student;
        }
    }
}