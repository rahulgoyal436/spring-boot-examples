/*
Test generated by RoostGPT for test rahul-local-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Positive case where a valid student object is provided as input**
   - Description: This scenario will test if the function is able to successfully create a student when a valid student object is provided.
   - Input: A valid student object with all required fields filled.
   - Expected Result: The function should return a `ResponseEntity` with a `201 Created` status and the location of the saved student should be in the header.

2. **Scenario: Negative case where an invalid student object is provided as input**
   - Description: This scenario will test if the function is able to handle a scenario where an invalid student object is provided.
   - Input: An invalid student object with missing or invalid fields.
   - Expected Result: The function should return an error response with appropriate HTTP status code and error message.

3. **Scenario: Case where the student object already exists in the repository**
   - Description: This scenario will test if the function is able to handle a scenario where the student object already exists in the repository.
   - Input: A student object that is already present in the repository.
   - Expected Result: The function should return an error response with appropriate HTTP status code and error message.

4. **Scenario: Case where the repository throws an exception while saving the student object**
   - Description: This scenario will test if the function is able to handle a scenario where the repository throws an exception while saving the student object.
   - Input: A valid student object.
   - Expected Result: The function should return an error response with appropriate HTTP status code and error message.

5. **Scenario: Case where the repository is not available**
   - Description: This scenario will test if the function is able to handle a scenario where the repository is not available.
   - Input: A valid student object.
   - Expected Result: The function should return an error response with appropriate HTTP status code and error message.
*/
package com.in28minutes.springboot.rest.example.student;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.net.URI;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class StudentResource_createStudent_52b9f59693_Test {

    @InjectMocks
    StudentResource studentResource;

    @Mock
    StudentRepository studentRepository;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateStudent_ValidInput() {
        Student student = new Student(1L, "John Doe", "A1234567");
        when(studentRepository.save(any(Student.class))).thenReturn(student);

        ResponseEntity<Object> response = studentResource.createStudent(student);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(new URI("/1"), response.getHeaders().getLocation());
    }

    @Test(expected = RuntimeException.class)
    public void testCreateStudent_InvalidInput() {
        Student student = new Student(); // Invalid student with no data
        when(studentRepository.save(any(Student.class))).thenThrow(RuntimeException.class);

        studentResource.createStudent(student);
    }

    @Test(expected = RuntimeException.class)
    public void testCreateStudent_AlreadyExists() {
        Student student = new Student(1L, "John Doe", "A1234567");
        when(studentRepository.findById(1L)).thenReturn(Optional.of(student));

        studentResource.createStudent(student);
    }

    @Test(expected = RuntimeException.class)
    public void testCreateStudent_RepositoryException() {
        Student student = new Student(1L, "John Doe", "A1234567");
        when(studentRepository.save(any(Student.class))).thenThrow(RuntimeException.class);

        studentResource.createStudent(student);
    }

    @Test(expected = RuntimeException.class)
    public void testCreateStudent_RepositoryNotAvailable() {
        Student student = new Student(1L, "John Doe", "A1234567");
        when(studentRepository.save(any(Student.class))).thenThrow(RuntimeException.class);

        studentResource.createStudent(student);
    }
}
