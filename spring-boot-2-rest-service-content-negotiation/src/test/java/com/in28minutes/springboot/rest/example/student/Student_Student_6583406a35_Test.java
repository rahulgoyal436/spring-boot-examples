/*
Test generated by RoostGPT for test rahul-local-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Student Creation
- Given a valid id, name, and passport number
- When we call the Student constructor
- Then a Student object should be created with the given id, name, and passport number

Test Scenario 2: Null ID
- Given a null id, a valid name, and a valid passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the id cannot be null

Test Scenario 3: Null Name
- Given a valid id, a null name, and a valid passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the name cannot be null

Test Scenario 4: Null Passport Number
- Given a valid id, a valid name, and a null passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the passport number cannot be null

Test Scenario 5: Empty Name
- Given a valid id, an empty name, and a valid passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the name cannot be empty

Test Scenario 6: Empty Passport Number
- Given a valid id, a valid name, and an empty passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the passport number cannot be empty

Test Scenario 7: Invalid ID
- Given an invalid id (such as a negative number), a valid name, and a valid passport number
- When we call the Student constructor
- Then an error should be thrown indicating that the id is not valid

Test Scenario 8: Invalid Passport Number
- Given a valid id, a valid name, and an invalid passport number (such as a number with less than the required digits)
- When we call the Student constructor
- Then an error should be thrown indicating that the passport number is not valid
*/
package com.in28minutes.springboot.rest.example.student;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Student_Student_6583406a35_Test {
    
    @Test
    public void testValidStudentCreation() {
        Student student = new Student(1L, "John Doe", "AB123456");
        assertEquals(1L, student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("AB123456", student.getPassportNumber());
    }

    @Test
    public void testNullID() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(null, "John Doe", "AB123456");
        });
        assertEquals("ID cannot be null", exception.getMessage());
    }

    @Test
    public void testNullName() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(1L, null, "AB123456");
        });
        assertEquals("Name cannot be null", exception.getMessage());
    }

    @Test
    public void testNullPassportNumber() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(1L, "John Doe", null);
        });
        assertEquals("Passport Number cannot be null", exception.getMessage());
    }

    @Test
    public void testEmptyName() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(1L, "", "AB123456");
        });
        assertEquals("Name cannot be empty", exception.getMessage());
    }

    @Test
    public void testEmptyPassportNumber() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(1L, "John Doe", "");
        });
        assertEquals("Passport Number cannot be empty", exception.getMessage());
    }

    @Test
    public void testInvalidID() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(-1L, "John Doe", "AB123456");
        });
        assertEquals("ID is not valid", exception.getMessage());
    }

    @Test
    public void testInvalidPassportNumber() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Student student = new Student(1L, "John Doe", "AB12");
        });
        assertEquals("Passport Number is not valid", exception.getMessage());
    }
}
